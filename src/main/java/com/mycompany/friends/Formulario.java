/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.friends;

import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import javax.swing.JOptionPane;

/**
 *
 * @author omarz
 */
public class Formulario extends javax.swing.JFrame {

    /**
     * Creates new form Formulario
     */
    public Formulario() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        txtNumber = new javax.swing.JTextField();
        btnCreate = new javax.swing.JButton();
        btnRead = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Name:");

        jLabel2.setText("Number:");

        jLabel3.setText("CRUD actividad 6 POO G4");

        txtName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameActionPerformed(evt);
            }
        });

        btnCreate.setText("Create");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        btnRead.setText("Read");
        btnRead.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReadActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(185, 185, 185)
                        .addComponent(jLabel3))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(153, 153, 153)
                        .addComponent(btnClear)
                        .addGap(115, 115, 115)
                        .addComponent(btnExit)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(102, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(28, 28, 28)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtNumber)
                            .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(104, 104, 104))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(btnCreate)
                        .addGap(18, 18, 18)
                        .addComponent(btnRead)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdate)
                        .addGap(18, 18, 18)
                        .addComponent(btnDelete)
                        .addGap(81, 81, 81))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel3)
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCreate)
                    .addComponent(btnRead)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnClear)
                    .addComponent(btnExit))
                .addContainerGap(39, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>                        

    private void txtNameActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
       
    }                                       

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
      
        try {

			// Get the name of the contact to be updated
			// from the Command line argument
			//String newName = data[0];
                        String newName = String.valueOf(txtName.getText());

			// Get the number to be updated
			// from the Command line argument
			//long newNumber = Long.parseLong(data[1]);
                        long newNumber = Long.parseLong(txtNumber.getText());

			String nameNumberString;
			String name;
			long number;
			int index;

			// Using file pointer creating the file.
                        // Creating the file friendsContact.txt using the class file
			File file = new File("/home/omarz/Desktop/friendsContact.txt");

			if (!file.exists()) {

				// Create a new file if not exists.
				file.createNewFile();
			}

			// Opening file in reading and write mode.

			RandomAccessFile raf
				= new RandomAccessFile(file, "rw");
			boolean found = false;

			// Checking whether the name
			// of contact already exists.
			// getFilePointer() give the current offset
			// value from start of the file.
			while (raf.getFilePointer() < raf.length()) {

				// reading line from the file.
				nameNumberString = raf.readLine();

				// splitting the string to get name and
				// number
				String[] lineSplit
					= nameNumberString.split("!");

				// separating name and number.
				name = lineSplit[0];
				number = Long.parseLong(lineSplit[1]);

				// if condition to find existence of record.
				if (name == newName || number == newNumber) {
					found = true;
                                        System.out.println("the record exists");
					break;
				}
			}

			if (found == false) {

				// Enter the if block when a record
				// is not already present in the file.
				nameNumberString
					= newName + "!"
					+ String.valueOf(newNumber);

				// writeBytes function to write a string
				// as a sequence of bytes.
				raf.writeBytes(nameNumberString);

				// To insert the next record in new line.
				raf.writeBytes(System.lineSeparator());

				// Print the message
                                JOptionPane.showMessageDialog(null, "The Friend " + newName + " was added");
				//System.out.println("The Friend " + newName + " added ");

				// Closing the file.
				raf.close();
			}
			// The contact to be updated
			// could not be found
			else {

				// Closing the resources.
				raf.close();

				// Print the message
				System.out.println(" Input name"
								+ " does not exists. ");
			}
		}

		catch (IOException ioe) {

			System.out.println(ioe);
		}
		catch (NumberFormatException nef) {

			System.out.println(nef);
		}
    }                                         

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        txtName.setText("");
        txtNumber.setText("");
    }                                        

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
        System.exit(0);
    }                                       

    private void btnReadActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
        try {
        // Using file pointer creating the file.
        File file = new File("/home/omarz/Desktop/friendsContact.txt");

        if (!file.exists()) {
            // Display a message if the file doesn't exist.
            JOptionPane.showMessageDialog(null, "No contacts found.");
            return;
        }

        // Opening file in reading mode.
        RandomAccessFile raf = new RandomAccessFile(file, "r");

        // Clear existing text in JTextArea
        // Assuming you have a JTextArea for displaying the contacts
        // named "textAreaContacts", you can replace it with the actual name.
        textAreaContacts.setText("");

        // Traversing the file
        while (raf.getFilePointer() < raf.length()) {
            // Reading line from the file.
            String nameNumberString = raf.readLine();

            // Splitting the string to get name and number.
            String[] lineSplit = nameNumberString.split("!");

            // Separating name and number.
            String name = lineSplit[0];
            long number = Long.parseLong(lineSplit[1]);

            // Display the contact data in JTextArea.
            textAreaContacts.append("Friend Name: " + name + "\n"
                    + "Contact Number: " + number + "\n\n");
        }

        // Closing the file.
        raf.close();
    } catch (IOException | NumberFormatException e) {
        // Handle exceptions.
        JOptionPane.showMessageDialog(null, "Error reading contacts.");
    }
    }                                       

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        try {
        // Get the name of the contact to be updated
        String inputName = txtName.getText();

        // Get the new number from the text field
        long newNumber = Long.parseLong(txtNumber.getText());

        String nameNumberString;
        String name;
        long number;
        int index;

        // Using file pointer creating the file.
        File file = new File("/home/omarz/Desktop/friendsContact.txt");

        if (!file.exists()) {
            // Display a message if the file doesn't exist.
            JOptionPane.showMessageDialog(null, "No contacts found.");
            return;
        }

        // Creating a temporary file
        File tmpFile = new File("/home/omarz/Desktop/temp.txt");

        // Opening the temporary file in ReadWrite Mode
        RandomAccessFile tmpraf = new RandomAccessFile(tmpFile, "rw");

        // Opening file in reading and write mode.
        RandomAccessFile raf = new RandomAccessFile(file, "rw");
        boolean found = false;

        // Checking whether the name of contact already exists.
        while (raf.getFilePointer() < raf.length()) {
            // reading line from the file.
            nameNumberString = raf.readLine();

            // splitting the string to get name and number
            String[] lineSplit = nameNumberString.split("!");

            // separating name and number
            name = lineSplit[0];
            number = Long.parseLong(lineSplit[1]);

            // if condition to find existence of record
            if (name.equals(inputName)) {
                found = true;
                break;
            }
        }

        // Update the contact if record exists
        if (found) {
            // Set file pointers to start
            raf.seek(0);
            tmpraf.seek(0);

            // Traversing the friendsContact.txt file
            while (raf.getFilePointer() < raf.length()) {
                // Reading the contact from the file
                nameNumberString = raf.readLine();

                index = nameNumberString.indexOf('!');
                name = nameNumberString.substring(0, index);

                // Check if the fetched contact is the one to be updated
                if (name.equals(inputName)) {
                    // Update the number of this contact
                    nameNumberString = name + "!" + String.valueOf(newNumber);
                }

                // Add this contact in the temporary file
                tmpraf.writeBytes(nameNumberString);

                // Add the line separator in the temporary file
                tmpraf.writeBytes(System.lineSeparator());
            }

            // The contact has been updated now
            // So copy the updated content from
            // the temporary file to the original file

            // Set both files pointers to start
            raf.seek(0);
            tmpraf.seek(0);

            // Copy the contents from
            // the temporary file to the original file
            while (tmpraf.getFilePointer() < tmpraf.length()) {
                raf.writeBytes(tmpraf.readLine());
                raf.writeBytes(System.lineSeparator());
            }

            // Set the length of the original file
            // to that of the temporary file
            raf.setLength(tmpraf.length());

            // Closing the resources
            tmpraf.close();
            raf.close();

            // Deleting the temporary file
            tmpFile.delete();

            JOptionPane.showMessageDialog(null, "Friend updated.");
        } else {
            // Closing the resources
            raf.close();

            // Print the message
            JOptionPane.showMessageDialog(null, "Input name does not exist.");
        }
    } catch (IOException | NumberFormatException e) {
        // Handle exceptions
        JOptionPane.showMessageDialog(null, "Error updating contact.");
    }
    }                                         

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        try {
        // Get the name of the contact to be deleted
        String inputName = txtName.getText();

        String nameNumberString;
        String name;
        long number;
        int index;

        // Using file pointer creating the file.
        File file = new File("/home/omarz/Desktop/friendsContact.txt");

        if (!file.exists()) {
            // Display a message if the file doesn't exist.
            JOptionPane.showMessageDialog(null, "No contacts found.");
            return;
        }

        // Creating a temporary file
        File tmpFile = new File("/home/omarz/Desktop/temp.txt");

        // Opening the temporary file in ReadWrite Mode
        RandomAccessFile tmpraf = new RandomAccessFile(tmpFile, "rw");

        // Opening file in reading and write mode.
        RandomAccessFile raf = new RandomAccessFile(file, "rw");
        boolean found = false;

        // Checking whether the name of contact exists.
        while (raf.getFilePointer() < raf.length()) {
            // reading line from the file.
            nameNumberString = raf.readLine();

            // splitting the string to get name and number
            String[] lineSplit = nameNumberString.split("!");

            // separating name and number
            name = lineSplit[0];
            number = Long.parseLong(lineSplit[1]);

            // if condition to find existence of record.
            if (name.equals(inputName)) {
                found = true;
                break;
            }
        }

        // Delete the contact if record exists.
        if (found) {
            // Set file pointers to start
            raf.seek(0);
            tmpraf.seek(0);

            // Traversing the friendsContact.txt file
            while (raf.getFilePointer() < raf.length()) {
                // Reading the contact from the file
                nameNumberString = raf.readLine();

                index = nameNumberString.indexOf('!');
                name = nameNumberString.substring(0, index);

                // Check if the fetched contact is the one to be deleted
                if (name.equals(inputName)) {
                    // Skip inserting this contact into the temporary file
                    continue;
                }

                // Add this contact in the temporary file
                tmpraf.writeBytes(nameNumberString);

                // Add the line separator in the temporary file
                tmpraf.writeBytes(System.lineSeparator());
            }

            // The contact has been deleted now
            // So copy the updated content from
            // the temporary file to the original file

            // Set both files pointers to start
            raf.seek(0);
            tmpraf.seek(0);

            // Copy the contents from
            // the temporary file to original file
            while (tmpraf.getFilePointer() < tmpraf.length()) {
                raf.writeBytes(tmpraf.readLine());
                raf.writeBytes(System.lineSeparator());
            }

            // Set the length of the original file
            // to that of the temporary file
            raf.setLength(tmpraf.length());

            // Closing the resources
            tmpraf.close();
            raf.close();

            // Deleting the temporary file
            tmpFile.delete();

            JOptionPane.showMessageDialog(null, "Friend deleted.");
        } else {
            // Closing the resources
            raf.close();

            // Print the message
            JOptionPane.showMessageDialog(null, "Input name does not exist.");
        }
    } catch (IOException | NumberFormatException e) {
        // Handle exceptions
        JOptionPane.showMessageDialog(null, "Error deleting contact.");
    }
    }                                         

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Formulario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Formulario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Formulario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Formulario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Formulario().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnRead;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtNumber;
    // End of variables declaration                   
}
